// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                   String     @id @default(cuid())
  twitterUsername      String     @unique
  pumpWallet          String     @unique
  referralCode        String     @unique
  referredBy          String?    // ID of the user who referred this user
  referrer            User?      @relation("ReferralRelation", fields: [referredBy], references: [id])
  referrals           User[]     @relation("ReferralRelation")
  rewardsEarned       Reward[]
  twitterAccessToken  String?
  twitterRefreshToken String?
  twitterTokenExpiresAt DateTime?
  
  // Profile fields
  displayName        String?     // Optional, defaults to Twitter username
  bio               String?     // Optional user bio
  profileImageUrl   String?     // Profile picture URL
  customLinks       Json?       // Flexible storage for additional social links
  isProfileComplete Boolean     @default(false)
  
  // Rank & Progress fields
  rank              String      @default("Deadass Rookie")  // Current rank title
  xp                Int         @default(0)                 // Experience points
  totalLaunches     Int         @default(0)                // Number of tokens launched
  totalShills       Int         @default(0)                // Number of successful promotions
  achievements      Json?       // Unlocked achievements
  rankProgress      Json?       // Progress towards next rank
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  launchedTokens    LaunchedToken[]
}

model Reward {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Int
  rewardType  String    // "REFERRAL_L1", "REFERRAL_L2", "REFERRAL_L3", "QUEST"
  status      String    // "PENDING", "PAID", "FAILED"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Quest {
  id          String    @id @default(cuid())
  name        String
  description String
  reward      Int
  xp          Int
  type        String    // "TWITTER", "REFERRAL", "ENGAGEMENT"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LaunchedToken {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  // Token Details
  name              String
  symbol            String
  description       String?
  imageUrl          String?
  bannerUrl         String?
  
  // Platform & Launch Details
  platform          String    // "PUMP_FUN", "LETSBONK"
  launchpadId       String?   // ID from the actual launchpad (when available)
  launchpadUrl      String?   // URL to the token on the launchpad
  
  // Token Metadata
  website           String?
  twitterUrl        String?
  telegramUrl       String?
  totalSupply       String?
  decimals          Int?
  
  // Status & Tracking
  status            String    @default("PENDING") // "PENDING", "LAUNCHING", "LIVE", "FAILED"
  launchDate        DateTime?
  liveDate          DateTime?
  
  // Market Data (will be updated via API)
  marketCap         Float?
  price             Float?
  volume24h         Float?
  holders           Int?
  
  // API Integration
  lastApiCheck      DateTime?
  apiData           Json?     // Raw API response data
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([userId])
  @@index([platform])
  @@index([status])
  @@index([launchDate])
}
